/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kkimleang.commentservice.event;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CommentPostedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8486107375880749126L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommentPostedEvent\",\"namespace\":\"com.kkimleang.commentservice.event\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"postId\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"content\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subreddit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CommentPostedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommentPostedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CommentPostedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CommentPostedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CommentPostedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CommentPostedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CommentPostedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CommentPostedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CommentPostedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int id;
  private int postId;
  private int userId;
  private java.lang.String email;
  private java.lang.String username;
  private java.lang.String content;
  private java.lang.String subreddit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommentPostedEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param postId The new value for postId
   * @param userId The new value for userId
   * @param email The new value for email
   * @param username The new value for username
   * @param content The new value for content
   * @param subreddit The new value for subreddit
   */
  public CommentPostedEvent(java.lang.Integer id, java.lang.Integer postId, java.lang.Integer userId, java.lang.String email, java.lang.String username, java.lang.String content, java.lang.String subreddit) {
    this.id = id;
    this.postId = postId;
    this.userId = userId;
    this.email = email;
    this.username = username;
    this.content = content;
    this.subreddit = subreddit;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return postId;
    case 2: return userId;
    case 3: return email;
    case 4: return username;
    case 5: return content;
    case 6: return subreddit;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: postId = (java.lang.Integer)value$; break;
    case 2: userId = (java.lang.Integer)value$; break;
    case 3: email = value$ != null ? value$.toString() : null; break;
    case 4: username = value$ != null ? value$.toString() : null; break;
    case 5: content = value$ != null ? value$.toString() : null; break;
    case 6: subreddit = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }



  /**
   * Gets the value of the 'postId' field.
   * @return The value of the 'postId' field.
   */
  public int getPostId() {
    return postId;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public int getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }



  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.String getUsername() {
    return username;
  }



  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public java.lang.String getContent() {
    return content;
  }



  /**
   * Gets the value of the 'subreddit' field.
   * @return The value of the 'subreddit' field.
   */
  public java.lang.String getSubreddit() {
    return subreddit;
  }



  /**
   * Creates a new CommentPostedEvent RecordBuilder.
   * @return A new CommentPostedEvent RecordBuilder
   */
  public static com.kkimleang.commentservice.event.CommentPostedEvent.Builder newBuilder() {
    return new com.kkimleang.commentservice.event.CommentPostedEvent.Builder();
  }

  /**
   * Creates a new CommentPostedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommentPostedEvent RecordBuilder
   */
  public static com.kkimleang.commentservice.event.CommentPostedEvent.Builder newBuilder(com.kkimleang.commentservice.event.CommentPostedEvent.Builder other) {
    if (other == null) {
      return new com.kkimleang.commentservice.event.CommentPostedEvent.Builder();
    } else {
      return new com.kkimleang.commentservice.event.CommentPostedEvent.Builder(other);
    }
  }

  /**
   * Creates a new CommentPostedEvent RecordBuilder by copying an existing CommentPostedEvent instance.
   * @param other The existing instance to copy.
   * @return A new CommentPostedEvent RecordBuilder
   */
  public static com.kkimleang.commentservice.event.CommentPostedEvent.Builder newBuilder(com.kkimleang.commentservice.event.CommentPostedEvent other) {
    if (other == null) {
      return new com.kkimleang.commentservice.event.CommentPostedEvent.Builder();
    } else {
      return new com.kkimleang.commentservice.event.CommentPostedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CommentPostedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommentPostedEvent>
    implements org.apache.avro.data.RecordBuilder<CommentPostedEvent> {

    private int id;
    private int postId;
    private int userId;
    private java.lang.String email;
    private java.lang.String username;
    private java.lang.String content;
    private java.lang.String subreddit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kkimleang.commentservice.event.CommentPostedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.postId)) {
        this.postId = data().deepCopy(fields()[1].schema(), other.postId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.username)) {
        this.username = data().deepCopy(fields()[4].schema(), other.username);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.content)) {
        this.content = data().deepCopy(fields()[5].schema(), other.content);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.subreddit)) {
        this.subreddit = data().deepCopy(fields()[6].schema(), other.subreddit);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing CommentPostedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kkimleang.commentservice.event.CommentPostedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.postId)) {
        this.postId = data().deepCopy(fields()[1].schema(), other.postId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.username)) {
        this.username = data().deepCopy(fields()[4].schema(), other.username);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.content)) {
        this.content = data().deepCopy(fields()[5].schema(), other.content);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.subreddit)) {
        this.subreddit = data().deepCopy(fields()[6].schema(), other.subreddit);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'postId' field.
      * @return The value.
      */
    public int getPostId() {
      return postId;
    }


    /**
      * Sets the value of the 'postId' field.
      * @param value The value of 'postId'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setPostId(int value) {
      validate(fields()[1], value);
      this.postId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'postId' field has been set.
      * @return True if the 'postId' field has been set, false otherwise.
      */
    public boolean hasPostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'postId' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearPostId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public int getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setUserId(int value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearUserId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setEmail(java.lang.String value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setUsername(java.lang.String value) {
      validate(fields()[4], value);
      this.username = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearUsername() {
      username = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public java.lang.String getContent() {
      return content;
    }


    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setContent(java.lang.String value) {
      validate(fields()[5], value);
      this.content = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearContent() {
      content = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'subreddit' field.
      * @return The value.
      */
    public java.lang.String getSubreddit() {
      return subreddit;
    }


    /**
      * Sets the value of the 'subreddit' field.
      * @param value The value of 'subreddit'.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder setSubreddit(java.lang.String value) {
      validate(fields()[6], value);
      this.subreddit = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'subreddit' field has been set.
      * @return True if the 'subreddit' field has been set, false otherwise.
      */
    public boolean hasSubreddit() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'subreddit' field.
      * @return This builder.
      */
    public com.kkimleang.commentservice.event.CommentPostedEvent.Builder clearSubreddit() {
      subreddit = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommentPostedEvent build() {
      try {
        CommentPostedEvent record = new CommentPostedEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.postId = fieldSetFlags()[1] ? this.postId : (java.lang.Integer) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.Integer) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.String) defaultValue(fields()[3]);
        record.username = fieldSetFlags()[4] ? this.username : (java.lang.String) defaultValue(fields()[4]);
        record.content = fieldSetFlags()[5] ? this.content : (java.lang.String) defaultValue(fields()[5]);
        record.subreddit = fieldSetFlags()[6] ? this.subreddit : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommentPostedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommentPostedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommentPostedEvent>
    READER$ = (org.apache.avro.io.DatumReader<CommentPostedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeInt(this.postId);

    out.writeInt(this.userId);

    out.writeString(this.email);

    out.writeString(this.username);

    out.writeString(this.content);

    out.writeString(this.subreddit);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.postId = in.readInt();

      this.userId = in.readInt();

      this.email = in.readString();

      this.username = in.readString();

      this.content = in.readString();

      this.subreddit = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.postId = in.readInt();
          break;

        case 2:
          this.userId = in.readInt();
          break;

        case 3:
          this.email = in.readString();
          break;

        case 4:
          this.username = in.readString();
          break;

        case 5:
          this.content = in.readString();
          break;

        case 6:
          this.subreddit = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










