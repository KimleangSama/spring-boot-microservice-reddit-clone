/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kkimleang.authservice.event;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuthVerifiedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6590243066203191028L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuthVerifiedEvent\",\"namespace\":\"com.kkimleang.authservice.event\",\"fields\":[{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"verification_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<AuthVerifiedEvent> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<AuthVerifiedEvent> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<AuthVerifiedEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<AuthVerifiedEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<AuthVerifiedEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this AuthVerifiedEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a AuthVerifiedEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a AuthVerifiedEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static AuthVerifiedEvent fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.String email;
    private java.lang.String username;
    private java.lang.String verification_code;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public AuthVerifiedEvent() {}

    /**
     * All-args constructor.
     * @param email The new value for email
     * @param username The new value for username
     * @param verification_code The new value for verification_code
     */
    public AuthVerifiedEvent(java.lang.String email, java.lang.String username, java.lang.String verification_code) {
        this.email = email;
        this.username = username;
        this.verification_code = verification_code;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

    @Override
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return email;
            case 1: return username;
            case 2: return verification_code;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: email = value$ != null ? value$.toString() : null; break;
            case 1: username = value$ != null ? value$.toString() : null; break;
            case 2: verification_code = value$ != null ? value$.toString() : null; break;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'email' field.
     * @return The value of the 'email' field.
     */
    public java.lang.String getEmail() {
        return email;
    }



    /**
     * Gets the value of the 'username' field.
     * @return The value of the 'username' field.
     */
    public java.lang.String getUsername() {
        return username;
    }



    /**
     * Gets the value of the 'verification_code' field.
     * @return The value of the 'verification_code' field.
     */
    public java.lang.String getVerificationCode() {
        return verification_code;
    }



    /**
     * Creates a new AuthVerifiedEvent RecordBuilder.
     * @return A new AuthVerifiedEvent RecordBuilder
     */
    public static com.kkimleang.authservice.event.AuthVerifiedEvent.Builder newBuilder() {
        return new com.kkimleang.authservice.event.AuthVerifiedEvent.Builder();
    }

    /**
     * Creates a new AuthVerifiedEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new AuthVerifiedEvent RecordBuilder
     */
    public static com.kkimleang.authservice.event.AuthVerifiedEvent.Builder newBuilder(com.kkimleang.authservice.event.AuthVerifiedEvent.Builder other) {
        if (other == null) {
            return new com.kkimleang.authservice.event.AuthVerifiedEvent.Builder();
        } else {
            return new com.kkimleang.authservice.event.AuthVerifiedEvent.Builder(other);
        }
    }

    /**
     * Creates a new AuthVerifiedEvent RecordBuilder by copying an existing AuthVerifiedEvent instance.
     * @param other The existing instance to copy.
     * @return A new AuthVerifiedEvent RecordBuilder
     */
    public static com.kkimleang.authservice.event.AuthVerifiedEvent.Builder newBuilder(com.kkimleang.authservice.event.AuthVerifiedEvent other) {
        if (other == null) {
            return new com.kkimleang.authservice.event.AuthVerifiedEvent.Builder();
        } else {
            return new com.kkimleang.authservice.event.AuthVerifiedEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for AuthVerifiedEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuthVerifiedEvent>
            implements org.apache.avro.data.RecordBuilder<AuthVerifiedEvent> {

        private java.lang.String email;
        private java.lang.String username;
        private java.lang.String verification_code;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.kkimleang.authservice.event.AuthVerifiedEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.email)) {
                this.email = data().deepCopy(fields()[0].schema(), other.email);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.username)) {
                this.username = data().deepCopy(fields()[1].schema(), other.username);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.verification_code)) {
                this.verification_code = data().deepCopy(fields()[2].schema(), other.verification_code);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
        }

        /**
         * Creates a Builder by copying an existing AuthVerifiedEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(com.kkimleang.authservice.event.AuthVerifiedEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.email)) {
                this.email = data().deepCopy(fields()[0].schema(), other.email);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.username)) {
                this.username = data().deepCopy(fields()[1].schema(), other.username);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.verification_code)) {
                this.verification_code = data().deepCopy(fields()[2].schema(), other.verification_code);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'email' field.
         * @return The value.
         */
        public java.lang.String getEmail() {
            return email;
        }


        /**
         * Sets the value of the 'email' field.
         * @param value The value of 'email'.
         * @return This builder.
         */
        public com.kkimleang.authservice.event.AuthVerifiedEvent.Builder setEmail(java.lang.String value) {
            validate(fields()[0], value);
            this.email = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'email' field has been set.
         * @return True if the 'email' field has been set, false otherwise.
         */
        public boolean hasEmail() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'email' field.
         * @return This builder.
         */
        public com.kkimleang.authservice.event.AuthVerifiedEvent.Builder clearEmail() {
            email = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'username' field.
         * @return The value.
         */
        public java.lang.String getUsername() {
            return username;
        }


        /**
         * Sets the value of the 'username' field.
         * @param value The value of 'username'.
         * @return This builder.
         */
        public com.kkimleang.authservice.event.AuthVerifiedEvent.Builder setUsername(java.lang.String value) {
            validate(fields()[1], value);
            this.username = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'username' field has been set.
         * @return True if the 'username' field has been set, false otherwise.
         */
        public boolean hasUsername() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'username' field.
         * @return This builder.
         */
        public com.kkimleang.authservice.event.AuthVerifiedEvent.Builder clearUsername() {
            username = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'verification_code' field.
         * @return The value.
         */
        public java.lang.String getVerificationCode() {
            return verification_code;
        }


        /**
         * Sets the value of the 'verification_code' field.
         * @param value The value of 'verification_code'.
         * @return This builder.
         */
        public com.kkimleang.authservice.event.AuthVerifiedEvent.Builder setVerificationCode(java.lang.String value) {
            validate(fields()[2], value);
            this.verification_code = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'verification_code' field has been set.
         * @return True if the 'verification_code' field has been set, false otherwise.
         */
        public boolean hasVerificationCode() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'verification_code' field.
         * @return This builder.
         */
        public com.kkimleang.authservice.event.AuthVerifiedEvent.Builder clearVerificationCode() {
            verification_code = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public AuthVerifiedEvent build() {
            try {
                AuthVerifiedEvent record = new AuthVerifiedEvent();
                record.email = fieldSetFlags()[0] ? this.email : (java.lang.String) defaultValue(fields()[0]);
                record.username = fieldSetFlags()[1] ? this.username : (java.lang.String) defaultValue(fields()[1]);
                record.verification_code = fieldSetFlags()[2] ? this.verification_code : (java.lang.String) defaultValue(fields()[2]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<AuthVerifiedEvent>
            WRITER$ = (org.apache.avro.io.DatumWriter<AuthVerifiedEvent>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<AuthVerifiedEvent>
            READER$ = (org.apache.avro.io.DatumReader<AuthVerifiedEvent>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override protected boolean hasCustomCoders() { return true; }

    @Override public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException
    {
        out.writeString(this.email);

        out.writeString(this.username);

        out.writeString(this.verification_code);

    }

    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException
    {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.email = in.readString();

            this.username = in.readString();

            this.verification_code = in.readString();

        } else {
            for (int i = 0; i < 3; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.email = in.readString();
                        break;

                    case 1:
                        this.username = in.readString();
                        break;

                    case 2:
                        this.verification_code = in.readString();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










